// CONVERSION OF INFIX EXPRESSION TO POSTFIX EXPRESSION //
#include <stdio.h>
#include <string.h>
#define MAX_SIZE 20

int F(char symbol)//stack precedence
{ 
    while(1)
    {
        switch(symbol)
        {
            case '+':
            case '-':return 2;
            case '*':
            case '%':
            case '/':return 4;
            case '$':
            case '^':return 5;
            case '(':return 0;
            case '#':return -1;
            default:return 8;
        }
    }
}
int G(char symbol)//input precedence
{
    while(1)
    {
        switch(symbol)
        {
            case '+':
            case '-':return 1;
            case '*':
            case '%':
            case '/':return 3;
            case '$':
            case '^':return 6;
            case '(':return 9;
            case ')':return 0;
            default:return 7;
        }
    }
}
void infix_to_postfix(char * infix,char * postfix)
{
    int j=0,top=-1,i;
    char S[MAX_SIZE],symbol;
    S[++top]='#';//pushing # on to stack
    for(i=0;i<strlen(infix);i++)
    {
        symbol=infix[i];
        while(F(S[top])>G(symbol))
        {
            postfix[j]=S[top--];// saving poped char in postfix expression  
            j++;
        }
        if(F(S[top])!=G(symbol))//pusing char if precedence of char is less
        {
            S[++top]=symbol;
        }
        else
        {
            top--;//if precedence is same 
        }
        
    }
    while(S[top]!= '#')//poping out all char till #
    {
        postfix[j]=S[top--];
        j++;
    }
    postfix[j]='\0';
    
}
int main()
{
    char infix[20];
    char postfix[20];
    printf("enter the infix exp\n");
    scanf("%s",infix);
    infix_to_postfix(infix,postfix);
    printf("result of exp is %s \n",postfix);
    return 0;
}
